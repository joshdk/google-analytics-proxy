// Copyright Josh Komoroske. All rights reserved.
// Use of this source code is governed by the MIT license,
// a copy of which can be found in the LICENSE.txt file.

// Package analytics provides functionality for interacting with the Google
// Analytics API.
package analytics

import (
	"context"
	"io"
	"log"
	"net"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"
	"time"
)

// HeaderTitle is an HTTP header that can be returned by an upstream server to
// manually set the "Document Title" value.
const HeaderTitle = "X-Gap-Title"

// HeaderUTMCampaign is an HTTP header that can be returned by an upstream
// server to manually set the "Campaign Name" value.
const HeaderUTMCampaign = "X-Gap-Utm-Campaign"

// HeaderUTMContent is an HTTP header that can be returned by an upstream
// server to manually set the "Campaign Content" value.
const HeaderUTMContent = "X-Gap-Utm-Content"

// HeaderUTMID is an HTTP header that can be returned by an upstream server to
// manually set the "Campaign ID" value.
const HeaderUTMID = "X-Gap-Utm-ID"

// HeaderUTMMedium is an HTTP header that can be returned by an upstream server
// to manually set the "Campaign Medium" value.
const HeaderUTMMedium = "X-Gap-Utm-Medium"

// HeaderUTMSource is an HTTP header that can be returned by an upstream server
// to manually set the "Campaign Source" value.
const HeaderUTMSource = "X-Gap-Utm-Source"

// HeaderUTMTerm is an HTTP header that can be returned by an upstream server
// to manually set the "Campaign Keyword" value.
const HeaderUTMTerm = "X-Gap-Utm-Term"

// Compile-time assertion that Tracker implements http.Handler.
var _ http.Handler = (*Tracker)(nil)

// Tracker implements a custom http.Handler that wraps another http.Handler.
// When a request is handled by a Tracker, the wrapped http.Handler will be
// executed, and information about the request and response will be used to
// register a pageview event using the Google Analytics API.
type Tracker struct {
	// TrackingID is the tracking id for the Google Analytics property that you
	// want to track pageview events for. This value can be found in your
	// Google Analytics dashboard.
	// Example: "UA-123456789-1"
	TrackingID string

	// PropertyName is the name for the Google Analytics property that you want
	// to track pageview events for. This can be found in your Google Analytics
	// dashboard.
	// Example: "example.com"
	PropertyName string

	// DryRun is used to disable reporting pageview events.
	DryRun bool

	// Handler is a http handler that is "wrapped" by the Tracker and actually
	// processes the client requests. The original request, as well as the
	// response generated by the handler is used to extract analytics data.
	Handler http.Handler
}

func (t *Tracker) ServeHTTP(writer http.ResponseWriter, request *http.Request) { // nolint:gocognit
	// We're going to be leveraging the httptest.ResponseRecorder so that the
	// responses from the wrapped handler can be extracted and copied.
	recorder := httptest.NewRecorder()

	// Execute the wrapped handler so that it writes a response to the recorder.
	t.Handler.ServeHTTP(recorder, request)
	log.Printf("%d %s %v", recorder.Code, request.Method, request.URL)

	// Copy all recorded response properties back to the original response.
	defer func() {
		// Copy all headers.
		for key, values := range recorder.Header() {
			for _, value := range values {
				// Don't return any headers that start with "X-Gap-" back to
				// the client.
				if strings.HasPrefix(key, "X-Gap-") {
					continue
				}
				writer.Header().Add(key, value)
			}
		}
		// Copy status code.
		writer.WriteHeader(recorder.Code)
		// Copy response body.
		_, _ = io.Copy(writer, recorder.Body)
	}()

	// Set values for the various Google Analytics request query parameters.
	// These values are used to accurately track the pageview event.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters
	params := url.Values{
		// Set the "Protocol Version" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#v
		"v": {"1"},

		// Set the "Tracking ID/ Web Property ID" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#tid
		"tid": {t.TrackingID},

		// Set the "Data Source" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ds
		"ds": {"joshdk/google-analytics-proxy"},

		// Set the "User Agent Override" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ua
		"ua": {request.UserAgent()},

		// Set the "Hit type" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#t
		"t": {"pageview"},

		// Set the "Non-Interaction Hit" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ni
		"ni": {"1"},

		// Set the "Document Host Name" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#dh
		"dh": {t.PropertyName},

		// Set the "Document Path" value.
		// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#dp
		"dp": {request.URL.RequestURI()},
	}

	// Set the "Client ID" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cid
	// Additionally, persist the returned cookie back to the client so that it
	// will be passed back during subsequent requests.
	if value, cookie := getCookie(request); cookie == nil {
		params.Set("cid", value)
	} else {
		params.Set("cid", value)
		defer http.SetCookie(writer, cookie)
	}

	// Set the "IP Override" value.
	// Use the  IP address given by the "X-Forwarded-For" header, if present.
	// Fallback to using the IP address of the client connection itself, which
	// may be inaccurate (or in a private address range) depending on your
	// networking configuration.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#uip
	if value := request.Header.Get("X-Forwarded-For"); value != "" {
		params.Set("uip", value)
	} else if value, _, err := net.SplitHostPort(request.RemoteAddr); err == nil {
		params.Set("uip", value)
	}

	// Set the "Document Referrer" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#dr
	if value := request.Referer(); value != "" {
		params.Set("dr", value)
	}

	// Set the "Campaign Name" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cn
	if value := request.URL.Query().Get("utm_campaign"); value != "" {
		params.Set("cn", value)
	} else if value := recorder.Header().Get(HeaderUTMCampaign); value != "" {
		params.Set("cn", value)
	}

	// Set the "Campaign Source" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cs
	if value := request.URL.Query().Get("utm_source"); value != "" {
		params.Set("cs", value)
	} else if value := recorder.Header().Get(HeaderUTMSource); value != "" {
		params.Set("cs", value)
	}

	// Set the "Campaign Medium" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cm
	if value := request.URL.Query().Get("utm_medium"); value != "" {
		params.Set("cm", value)
	} else if value := recorder.Header().Get(HeaderUTMMedium); value != "" {
		params.Set("cm", value)
	}

	// Set the "Campaign Keyword" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ck
	if value := request.URL.Query().Get("utm_term"); value != "" {
		params.Set("ck", value)
	} else if value := recorder.Header().Get(HeaderUTMTerm); value != "" {
		params.Set("ck", value)
	}

	// Set the "Campaign Content" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cc
	if value := request.URL.Query().Get("utm_content"); value != "" {
		params.Set("cc", value)
	} else if value := recorder.Header().Get(HeaderUTMContent); value != "" {
		params.Set("cc", value)
	}

	// Set the "Campaign ID" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ci
	if value := request.URL.Query().Get("utm_id"); value != "" {
		params.Set("ci", value)
	} else if value := recorder.Header().Get(HeaderUTMID); value != "" {
		params.Set("ci", value)
	}

	// Set the "User Language" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ul
	if value := request.Header.Get("Accept-Language"); value != "" {
		params.Set("ul", value)
	}

	// Set the "Document Title" value.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#dt
	if value := recorder.Header().Get(HeaderTitle); value != "" {
		params.Set("dt", value)
	} else if value, _ := getTitle(recorder); value != "" {
		params.Set("dt", value)
	}

	// Build the Google Analytics collection url.
	// See: https://developers.google.com/analytics/devguides/collection/protocol/v1/reference#endpoint
	googleAnalytics := url.URL{
		Scheme:   "https",
		Host:     "www.google-analytics.com",
		Path:     "collect",
		RawQuery: params.Encode(),
	}

	// Dry run mode is enabled. Log what we would have done and return
	// immediately.
	if t.DryRun {
		log.Printf("skipping sending pageview to %v", googleAnalytics.String())
		return
	}

	// Execute the actual request to Google Analytics. We completely ignore the
	// response as the endpoint always returns a successful (200) response,
	// regardless of the request. We also only log an error in order to not
	// interrupt responses back to the client.
	go func() {
		if err := report(googleAnalytics.String()); err != nil {
			log.Printf("error: %v", err)
		}
	}()
}

func report(url string) error {
	// googleAnalyticsTimeout is a (rather short) timeout used when sending
	// requests to Google Analytics.
	const googleAnalyticsTimeout = time.Second * 5

	// Create, and automatically cancel, a context using the above timeout.
	ctx, cancel := context.WithTimeout(context.Background(), googleAnalyticsTimeout)
	defer cancel()

	request, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return err
	}

	// Send report to Google Analytics.
	response, err := http.DefaultClient.Do(request)
	if err != nil {
		return err
	}
	_ = response.Body.Close()

	return nil
}
